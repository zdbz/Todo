{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","disabled","onClick","preventDefault","text","completed","id","Math","random","className","name","Todo","todo","map","item","filter","el","ToDoList","filteredTodos","duration","easing","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c30711f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus})=>{\r\n    const inputTextHandler = (e) => {\r\n      // console.log(e.target.value);\r\n      setInputText(e.target.value);\r\n    }\r\n\r\n    const submitHandler =(e) =>{\r\n      e.preventDefault();\r\n      setTodos([\r\n        ...todos, {text: inputText, completed: false, id: Math.random()*1000 } \r\n      ]);\r\n      setInputText('');\r\n    }\r\n\r\n    const statusHandler =(e) =>{\r\n      setStatus(e.target.value)\r\n    }\r\n    \r\n    return(\r\n    <form>\r\n      <input  value={inputText} onChange={inputTextHandler} type=\"text\" />\r\n      <button disabled={!inputText} type=\"submit\" onClick={submitHandler}>\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onClick={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n\r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Todo = ({ todos, todo, setTodos }) => {\r\n  const deleteHandler = () => {\r\n    setTodos(todos.filter((el) => el.id !== todo.id));\r\n  };\r\n\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n        {todo.text}\r\n      </li>\r\n      <button onClick={completeHandler} className=\"complete-btn\">\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button onClick={deleteHandler} className=\"trash-btn\">\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\n\r\nconst ToDoList = ({ setTodos, todos, filteredTodos }) => {\r\n  return (\r\n      <FlipMove duration ={300} easing=\"ease-in-out\" >\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map((todo) => (\r\n          <div>\r\n            <Todo todos={todos} setTodos={setTodos} key={todo.id} todo={todo} />\r\n          </div>\r\n        ))}\r\n\r\n        {/* <Todo/> */}\r\n      </ul>\r\n    </div>\r\n    </FlipMove>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport ToDoList from './components/ToDoList';\n\nconst App = () =>{\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos]=useState([]);\n\n  useEffect (()=>{\n    getLocalTodos();\n  },[])\n\n  useEffect(()=>{\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status])\n\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter((todo) =>\n          todo.completed === true\n        ))\n        break;\n\n      case 'uncompleted':\n        setFilteredTodos(todos.filter( todo =>\n          todo.completed === false\n        ))\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n\n  //save to local storage\n  const saveLocalTodos = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }\n\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }\n    else{\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"))\n      setTodos(todoLocal);\n    }\n  }\n  return(\n    <div className=\"App\">\n      <header>\n        <h1>My ToDo List</h1>\n      </header>\n      <Form inputText={inputText} setStatus={setStatus} todos={todos} setTodos={setTodos} setInputText={setInputText}/>\n      <ToDoList filteredTodos={filteredTodos} setTodos={setTodos} todos ={todos}/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}